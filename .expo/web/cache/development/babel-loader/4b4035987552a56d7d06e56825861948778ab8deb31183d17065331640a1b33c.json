{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport HomeScreen from \"./components/homeInicial\";\nimport Postar from \"./components/postar\";\nimport Login from \"./components/login\";\nimport TodosComentarios from \"./components/comentario\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport Chats from \"./components/chat\";\nimport ChatScreen from \"./components/chat/chatScreen\";\nimport { Provider } from \"./utils/Provider\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { gravarConversa, lerChats } from \"./data/utils\";\nimport { conversaBuilder } from \"./model/Conversa\";\nimport SockJS from \"sockjs-client\";\nimport Stomp from \"stompjs\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nexport default function App() {\n  var webSock = useRef(null);\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    chatData = _useState2[0],\n    setChatData = _useState2[1];\n  useEffect(function () {\n    carregarChat(\"myKey\");\n    var sock = new SockJS(\"http://10.0.0.181:8080/ws\");\n    var stompClient = Stomp.over(sock);\n    webSock.current = stompClient;\n    webSock.current.connect({}, function () {\n      var _webSock$current;\n      if ((_webSock$current = webSock.current) != null && _webSock$current.connected) {\n        console.log(\"Conexão WebSocket estabelecida\");\n      } else {\n        console.log(\"Conexão WebSocket não está estabelecida\");\n      }\n    });\n    return function () {\n      if (webSock.current) {\n        webSock.current.disconnect(function () {\n          console.log(\"Desconectado.\");\n        });\n      }\n    };\n  }, []);\n  var carregarChat = function () {\n    var _ref = _asyncToGenerator(function* (key) {\n      var chatsCarregados = yield lerChats(key);\n      setChatData(chatsCarregados);\n    });\n    return function carregarChat(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    if (webSock.current != null) {\n      webSock.current.connect({}, function (frame) {\n        var _webSock$current2;\n        (_webSock$current2 = webSock.current) == null ? void 0 : _webSock$current2.subscribe(`/user/${2}/private`, function (mensagemI) {\n          var data = JSON.parse(mensagemI.body);\n          var newConversa = conversaBuilder(data);\n          atualizarChats(newConversa);\n        });\n      });\n    }\n  }, []);\n  var atualizarChats = function () {\n    var _ref2 = _asyncToGenerator(function* (newConversa) {\n      var chats = yield gravarConversa(newConversa, \"myKey\");\n      setChatData(chats);\n    });\n    return function atualizarChats(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsx(Provider.Provider, {\n    value: {\n      gravarConversa: gravarConversa,\n      chatData: chatData,\n      setChatData: setChatData,\n      webSock: webSock\n    },\n    children: _jsx(NavigationContainer, {\n      children: _jsxs(Stack.Navigator, {\n        initialRouteName: \"Login\",\n        screenOptions: {\n          headerShown: false\n        },\n        children: [_jsx(Stack.Screen, {\n          name: \"Login\",\n          component: Login\n        }), _jsx(Stack.Screen, {\n          name: \"Postar\",\n          component: Postar\n        }), _jsx(Stack.Screen, {\n          name: \"Comentario\",\n          component: TodosComentarios\n        }), _jsx(Stack.Screen, {\n          name: \"Home\",\n          component: Bottoms\n        }), _jsx(Stack.Screen, {\n          name: \"ChatScreen\",\n          component: ChatScreen\n        })]\n      })\n    })\n  });\n}\nvar Tab = createBottomTabNavigator();\nfunction Bottoms() {\n  return _jsxs(Tab.Navigator, {\n    screenOptions: {\n      headerShown: false\n    },\n    children: [_jsx(Tab.Screen, {\n      name: \"TabHome\",\n      component: HomeScreen,\n      options: {\n        tabBarLabel: \"Home\",\n        tabBarIcon: function tabBarIcon(_ref3) {\n          var color = _ref3.color,\n            size = _ref3.size;\n          return _jsx(Icon, {\n            name: \"home-outline\",\n            size: size,\n            color: color\n          });\n        }\n      }\n    }), _jsx(Tab.Screen, {\n      name: \"Chat\",\n      component: Chats,\n      options: {\n        tabBarLabel: \"Chat\",\n        tabBarIcon: function tabBarIcon(_ref4) {\n          var color = _ref4.color,\n            size = _ref4.size;\n          return _jsx(Icon, {\n            name: \"chatbox-ellipses-outline\",\n            size: size,\n            color: color\n          });\n        }\n      }\n    })]\n  });\n}","map":{"version":3,"names":["NavigationContainer","createNativeStackNavigator","HomeScreen","Postar","Login","TodosComentarios","createBottomTabNavigator","Icon","Chats","ChatScreen","Provider","useEffect","useRef","useState","gravarConversa","lerChats","conversaBuilder","SockJS","Stomp","jsx","_jsx","jsxs","_jsxs","Stack","App","webSock","_useState","_useState2","_slicedToArray","chatData","setChatData","carregarChat","sock","stompClient","over","current","connect","_webSock$current","connected","console","log","disconnect","_ref","_asyncToGenerator","key","chatsCarregados","_x","apply","arguments","frame","_webSock$current2","subscribe","mensagemI","data","JSON","parse","body","newConversa","atualizarChats","_ref2","chats","_x2","value","children","Navigator","initialRouteName","screenOptions","headerShown","Screen","name","component","Bottoms","Tab","options","tabBarLabel","tabBarIcon","_ref3","color","size","_ref4"],"sources":["/home/marcos_anderson/MeusProjetos/FriedZone/friendzoneapp/App.tsx"],"sourcesContent":["import { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport HomeScreen from \"./components/homeInicial\";\nimport Postar from \"./components/postar\";\nimport { RootStackParamList } from \"./utils/interfaces\";\nimport Login from \"./components/login\";\nimport TodosComentarios from \"./components/comentario\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport Icon from \"react-native-vector-icons/Ionicons\";\nimport Chats from \"./components/chat\";\nimport ChatScreen from \"./components/chat/chatScreen\";\nimport { Provider } from \"./utils/Provider\";\nimport { MutableRefObject, useEffect, useRef, useState } from \"react\";\nimport { gravarConversa, lerChats } from \"./data/utils\"; \nimport { Client } from \"stompjs\";\nimport { Chat } from \"./model/Chat\";\nimport { Conversa, TipoConversa, conversaBuilder } from \"./model/Conversa\";\nimport SockJS from \"sockjs-client\";\nimport Stomp from \"stompjs\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\nexport default function App() {\n    const webSock:MutableRefObject<Client | null> = useRef<Client | null>(null);\n\n    const [chatData, setChatData] = useState<Chat[]>([]);\n\n    useEffect(() => {\n        carregarChat(\"myKey\")\n        var sock = new SockJS(\"http://10.0.0.181:8080/ws\");\n        let stompClient: Client = Stomp.over(sock);\n        webSock.current = stompClient;\n        webSock.current.connect({}, () => {\n            if (webSock.current?.connected) {\n                console.log(\"Conexão WebSocket estabelecida\");\n            } else {\n                console.log(\"Conexão WebSocket não está estabelecida\");\n            }\n        })\n    \n        return () => {\n            if (webSock.current) { webSock.current.disconnect(() => { console.log(\"Desconectado.\") }); }\n        };\n    },[])\n\n    const carregarChat = async(key: string) => {\n        const chatsCarregados: Chat[] = await lerChats(key);\n        setChatData(chatsCarregados);\n    }\n    \n    useEffect(() => {\n        if (webSock.current != null) {\n            webSock.current.connect({}, function (frame) {\n                webSock.current?.subscribe(`/user/${2}/private`, function (mensagemI) {\n                    const data = JSON.parse(mensagemI.body)\n                    const newConversa: Conversa = conversaBuilder(data);\n                    atualizarChats(newConversa);\n                });\n            });\n        }\n    }, [])\n\n    const atualizarChats = async(newConversa: Conversa) => {\n        const chats:Chat[] = await gravarConversa(newConversa, \"myKey\");\n        setChatData(chats);\n    }\n\n    return (\n        <Provider.Provider value={{gravarConversa, chatData, setChatData, webSock}}>\n            <NavigationContainer>\n                <Stack.Navigator initialRouteName={\"Login\"} screenOptions={{headerShown: false}}>\n                    <Stack.Screen name={\"Login\"} component={Login}/>\n                    <Stack.Screen name={\"Postar\"} component={Postar}/>\n                    <Stack.Screen name={\"Comentario\"} component={TodosComentarios}/>\n                    <Stack.Screen name={\"Home\"} component={Bottoms}/>\n                    <Stack.Screen name={\"ChatScreen\"} component={ChatScreen}/>\n                </Stack.Navigator>\n            </NavigationContainer>\n        </Provider.Provider>\n    )\n}\n\nconst Tab = createBottomTabNavigator();\nfunction Bottoms() {\n    return (\n        <Tab.Navigator screenOptions={{headerShown: false}}>\n            <Tab.Screen name=\"TabHome\" component={HomeScreen} \n            options={{ tabBarLabel: \"Home\", tabBarIcon: ({color, size}) => (<Icon name=\"home-outline\" size={size} color={color}/>)}}/>\n            <Tab.Screen name=\"Chat\" component={Chats}\n            options={{ tabBarLabel: \"Chat\", tabBarIcon: ({color, size}) => (<Icon name=\"chatbox-ellipses-outline\" size={size} color={color}/>)}}/>\n        </Tab.Navigator>\n    )\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}