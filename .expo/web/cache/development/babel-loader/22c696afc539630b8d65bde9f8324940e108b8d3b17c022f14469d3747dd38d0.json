{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { conversaBuilder } from \"../../../model/Conversa\";\nexport var enviarChat = function enviarChat(mensagem, webSock, remetente, receptor, setMensagem) {\n  if (mensagem.length > 0 && webSock.current != null && webSock != null && webSock.current.connected) {\n    var _webSock$current;\n    var messageJSON = {\n      mensagem: mensagem,\n      timestamp: new Date(),\n      remetente: remetente,\n      receptor: receptor\n    };\n    var WsMensagemPrivada = \"/app/private-message\";\n    (_webSock$current = webSock.current) == null ? void 0 : _webSock$current.send(WsMensagemPrivada, {}, JSON.stringify(messageJSON));\n    setMensagem(\"\");\n  } else {\n    console.error(\"Erro: WebSocket não conectado\");\n  }\n};\nexport var atualizarConversas = function atualizarConversas(mensagemRecebida, setConversas, gravarConversa, key) {\n  var data = JSON.parse(mensagemRecebida.body);\n  var newConversa = conversaBuilder(data);\n  setConversas(function (prevConversas) {\n    return [].concat(_toConsumableArray(prevConversas), [newConversa]);\n  });\n  gravarConversa(newConversa, key);\n};\nexport var webSockMensagemConnect = function webSockMensagemConnect(webSock, receptor, setConversas, gravarConversa, key) {\n  if (webSock.current != null) {\n    webSock.current.connect({}, function (frame) {\n      var _webSock$current2;\n      (_webSock$current2 = webSock.current) == null ? void 0 : _webSock$current2.subscribe(`/user/${receptor}/private`, function (mensagemI) {\n        atualizarConversas(mensagemI, setConversas, gravarConversa, key);\n      });\n    });\n  }\n};","map":{"version":3,"names":["conversaBuilder","enviarChat","mensagem","webSock","remetente","receptor","setMensagem","length","current","connected","_webSock$current","messageJSON","timestamp","Date","WsMensagemPrivada","send","JSON","stringify","console","error","atualizarConversas","mensagemRecebida","setConversas","gravarConversa","key","data","parse","body","newConversa","prevConversas","concat","_toConsumableArray","webSockMensagemConnect","connect","frame","_webSock$current2","subscribe","mensagemI"],"sources":["/home/marcos_anderson/MeusProjetos/FriedZone/friendzoneapp/components/chat/websocket/chatEnviarAtualizar.tsx"],"sourcesContent":["import { Dispatch, MutableRefObject, SetStateAction, useContext } from \"react\";\nimport { Client } from \"stompjs\";\nimport { Conversa, conversaBuilder } from \"../../../model/Conversa\";\n\n/**\n@param {string} mensagem - Mensagem a ser enviada.\n@param {MutableRefObject<Client | null>} webSock - WebSock conectado.\n@param {number} remetente - ID do remetente.\n@param {number} receptor - ID do receptor.\n@param {Dispatch<SetStateAction<string>>} setMensagem - Estado para atualizar as mensagens.\n**/\nexport const enviarChat = (mensagem: string, webSock: MutableRefObject<Client | null>, remetente: number, receptor: number, setMensagem: Dispatch<SetStateAction<string>> ) => {\n    if (mensagem.length > 0 && webSock.current != null && webSock?.current.connected) {\n        const messageJSON = {\n            mensagem: mensagem,\n            timestamp: new Date(),\n            remetente: remetente,\n            receptor: receptor\n        };\n        const WsMensagemPrivada: string = \"/app/private-message\";\n        webSock.current?.send(WsMensagemPrivada, {}, JSON.stringify(messageJSON));\n        setMensagem(\"\");\n    } else {\n        console.error(\"Erro: WebSocket não conectado\");\n    }\n};\n\nexport const atualizarConversas = (mensagemRecebida: any, setConversas: Dispatch<SetStateAction<Conversa[]>>, gravarConversa: (newConversa: Conversa, key: string) => void, key: string) => {\n    const data = JSON.parse(mensagemRecebida.body)\n    const newConversa: Conversa = conversaBuilder(data);\n    setConversas(prevConversas => [...prevConversas, newConversa]);\n    gravarConversa(newConversa, key)\n}\n\nexport const webSockMensagemConnect = (webSock: MutableRefObject<Client | null>, receptor: number, setConversas: Dispatch<SetStateAction<Conversa[]>>, gravarConversa: (newConversa: Conversa, key: string) => void, key: string) => {\n    if (webSock.current != null) {\n        webSock.current.connect({}, function (frame) {\n            webSock.current?.subscribe(`/user/${receptor}/private`, function (mensagemI) {\n                atualizarConversas(mensagemI, setConversas, gravarConversa, key);\n            });\n        });\n    }\n}\n"],"mappings":";AAEA,SAAmBA,eAAe;AASlC,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAIC,QAAgB,EAAEC,OAAwC,EAAEC,SAAiB,EAAEC,QAAgB,EAAEC,WAA6C,EAAM;EAC3K,IAAIJ,QAAQ,CAACK,MAAM,GAAG,CAAC,IAAIJ,OAAO,CAACK,OAAO,IAAI,IAAI,IAAIL,OAAO,YAAPA,OAAO,CAAEK,OAAO,CAACC,SAAS,EAAE;IAAA,IAAAC,gBAAA;IAC9E,IAAMC,WAAW,GAAG;MAChBT,QAAQ,EAAEA,QAAQ;MAClBU,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;MACrBT,SAAS,EAAEA,SAAS;MACpBC,QAAQ,EAAEA;IACd,CAAC;IACD,IAAMS,iBAAyB,GAAG,sBAAsB;IACxD,CAAAJ,gBAAA,GAAAP,OAAO,CAACK,OAAO,qBAAfE,gBAAA,CAAiBK,IAAI,CAACD,iBAAiB,EAAE,CAAC,CAAC,EAAEE,IAAI,CAACC,SAAS,CAACN,WAAW,CAAC,CAAC;IACzEL,WAAW,CAAC,EAAE,CAAC;EACnB,CAAC,MAAM;IACHY,OAAO,CAACC,KAAK,CAAC,+BAA+B,CAAC;EAClD;AACJ,CAAC;AAED,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAIC,gBAAqB,EAAEC,YAAkD,EAAEC,cAA4D,EAAEC,GAAW,EAAK;EACxL,IAAMC,IAAI,GAAGT,IAAI,CAACU,KAAK,CAACL,gBAAgB,CAACM,IAAI,CAAC;EAC9C,IAAMC,WAAqB,GAAG5B,eAAe,CAACyB,IAAI,CAAC;EACnDH,YAAY,CAAC,UAAAO,aAAa;IAAA,UAAAC,MAAA,CAAAC,kBAAA,CAAQF,aAAa,IAAED,WAAW;EAAA,CAAC,CAAC;EAC9DL,cAAc,CAACK,WAAW,EAAEJ,GAAG,CAAC;AACpC,CAAC;AAED,OAAO,IAAMQ,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAI7B,OAAwC,EAAEE,QAAgB,EAAEiB,YAAkD,EAAEC,cAA4D,EAAEC,GAAW,EAAK;EACjO,IAAIrB,OAAO,CAACK,OAAO,IAAI,IAAI,EAAE;IACzBL,OAAO,CAACK,OAAO,CAACyB,OAAO,CAAC,CAAC,CAAC,EAAE,UAAUC,KAAK,EAAE;MAAA,IAAAC,iBAAA;MACzC,CAAAA,iBAAA,GAAAhC,OAAO,CAACK,OAAO,qBAAf2B,iBAAA,CAAiBC,SAAS,CAAE,SAAQ/B,QAAS,UAAS,EAAE,UAAUgC,SAAS,EAAE;QACzEjB,kBAAkB,CAACiB,SAAS,EAAEf,YAAY,EAAEC,cAAc,EAAEC,GAAG,CAAC;MACpE,CAAC,CAAC;IACN,CAAC,CAAC;EACN;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}