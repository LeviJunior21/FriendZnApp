{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport styled from \"styled-components/native\";\nimport Constants from \"expo-constants\";\nimport { NavChat } from \"./nav\";\nimport React, { useContext, useEffect, useRef, useState } from \"react\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { TipoConversa } from \"../../model/Conversa\";\nimport { getCurrentDate } from \"../../utils/time\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport { enviarChat } from \"./websocket/chatEnviarAtualizar\";\nimport { Provider } from \"../../utils/Provider\";\nimport { buscarChat } from \"../../data/utils\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ChatScreen(props) {\n  var _props$route$params = props.route.params,\n    idRemetente = _props$route$params.idRemetente,\n    nome = _props$route$params.nome;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    conversas = _useState2[0],\n    setConversas = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    mensagem = _useState4[0],\n    setMensagem = _useState4[1];\n  var flatListRef = useRef(null);\n  var _useContext = useContext(Provider),\n    chatData = _useContext.chatData,\n    webSock = _useContext.webSock,\n    setChatData = _useContext.setChatData;\n  useEffect(function () {\n    carregarConversas();\n  }, [chatData, setChatData]);\n  var carregarConversas = function () {\n    var _ref = _asyncToGenerator(function* () {\n      var chatEncontrado = yield buscarChat(idRemetente, \"myKey\");\n      setConversas(_toConsumableArray(chatEncontrado.getConversas()));\n    });\n    return function carregarConversas() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsxs(Container, {\n    children: [_jsx(NavChat, {\n      navigation: props.navigation,\n      nome: nome,\n      idRemetente: idRemetente\n    }), _jsx(ScrollContainer, {\n      children: _jsx(FlatList, {\n        data: conversas,\n        keyExtractor: function keyExtractor(item, index) {\n          return index.toString();\n        },\n        onContentSizeChange: function onContentSizeChange() {\n          var _flatListRef$current;\n          return (_flatListRef$current = flatListRef.current) == null ? void 0 : _flatListRef$current.scrollToEnd({\n            animated: true\n          });\n        },\n        onLayout: function onLayout() {\n          var _flatListRef$current2;\n          return (_flatListRef$current2 = flatListRef.current) == null ? void 0 : _flatListRef$current2.scrollToEnd({\n            animated: true\n          });\n        },\n        renderItem: function renderItem(_ref2) {\n          var item = _ref2.item;\n          if (item.getTipoConversa() == TipoConversa.SENDER) {\n            return _jsxs(ChatTopicSender, {\n              children: [_jsx(Mensagem, {\n                children: item.getMensagem()\n              }), _jsx(Hora, {\n                children: getCurrentDate(item.getTimestamp())\n              })]\n            });\n          }\n          return _jsxs(ChatTopicReceiver, {\n            children: [_jsx(Mensagem, {\n              children: item.getMensagem()\n            }), _jsx(Hora, {\n              children: getCurrentDate(item.getTimestamp())\n            })]\n          });\n        }\n      })\n    }), _jsxs(MessageSenderContainer, {\n      children: [_jsx(Input, {\n        placeholder: \"Escreva sua mensagem...\",\n        cursorColor: \"white\",\n        placeholderTextColor: \"white\",\n        value: mensagem,\n        onChangeText: function onChangeText(text) {\n          return setMensagem(text);\n        }\n      }), _jsx(Sender, {\n        onPress: function onPress() {\n          enviarChat(mensagem, webSock, 1, idRemetente, setMensagem);\n        },\n        children: _jsx(Icon, {\n          name: \"send\",\n          color: \"green\",\n          size: 30\n        })\n      })]\n    })]\n  });\n}\nvar Container = styled.SafeAreaView`\n    flex: 1;\n    background-color: #303030;\n    margin-top: ${Constants.statusBarHeight}px;\n`;\nvar ScrollContainer = styled.ScrollView`\n    width: 100%;\n    height: ${Dimensions.get('window').height - Constants.statusBarHeight}px;\n`;\nvar ChatTopicSender = styled.TouchableOpacity`\n    width: 60%;\n    min-height: 50px;\n    background-color: #10a17d;\n    align-self: flex-start;\n    margin-top: 10px;\n    border-top-right-radius: 10px;\n    border-bottom-right-radius: 10px;\n    padding: 6px;\n    justify-content: center;\n`;\nvar ChatTopicReceiver = styled.TouchableOpacity`\n    width: 60%;\n    min-height: 50px;\n    background-color: #294b6b;\n    align-self: flex-end;\n    margin-top: 10px;\n    border-top-left-radius: 10px;\n    border-bottom-left-radius: 10px;\n    padding: 6px;\n    justify-content: center;\n`;\nvar Hora = styled.Text`\n    position: absolute;\n    bottom: 4px;\n    right:4px;\n    color: white;\n    font-size: 10px;\n`;\nvar Mensagem = styled.Text`\n    color: white;\n    font-size: 14px;\n    padding-top: 4px;\n    padding-bottom: 16px;\n`;\nvar MessageSenderContainer = styled.View`\n    width: 100%;\n    height: 50px;\n    flex-direction: row;\n    align-items: center;\n    border-top-width: 1px;\n    border-top-color: white;\n`;\nvar Input = styled.TextInput`\n    color: white;\n    flex: 1;\n    padding: 10px;\n`;\nvar Sender = styled.TouchableOpacity`\n    width: 50px;\n    height: 50px;\n    justify-content: center;\n    align-items: center;\n`;","map":{"version":3,"names":["styled","Constants","NavChat","React","useContext","useEffect","useRef","useState","Dimensions","FlatList","TipoConversa","getCurrentDate","Icon","enviarChat","Provider","buscarChat","jsx","_jsx","jsxs","_jsxs","ChatScreen","props","_props$route$params","route","params","idRemetente","nome","_useState","_useState2","_slicedToArray","conversas","setConversas","_useState3","_useState4","mensagem","setMensagem","flatListRef","_useContext","chatData","webSock","setChatData","carregarConversas","_ref","_asyncToGenerator","chatEncontrado","_toConsumableArray","getConversas","apply","arguments","Container","children","navigation","ScrollContainer","data","keyExtractor","item","index","toString","onContentSizeChange","_flatListRef$current","current","scrollToEnd","animated","onLayout","_flatListRef$current2","renderItem","_ref2","getTipoConversa","SENDER","ChatTopicSender","Mensagem","getMensagem","Hora","getTimestamp","ChatTopicReceiver","MessageSenderContainer","Input","placeholder","cursorColor","placeholderTextColor","value","onChangeText","text","Sender","onPress","name","color","size","SafeAreaView","statusBarHeight","ScrollView","get","height","TouchableOpacity","Text","View","TextInput"],"sources":["/home/marcos_anderson/MeusProjetos/FriedZone/friendzoneapp/components/chat/chatScreen.tsx"],"sourcesContent":["import styled from \"styled-components/native\";\nimport Constants from \"expo-constants\";\nimport { NavigationChat } from \"../../utils/interfaces\";\nimport { NavChat } from \"./nav\";\nimport React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { Dimensions, FlatList } from \"react-native\";\nimport { Conversa, TipoConversa } from \"../../model/Conversa\";\nimport { getCurrentDate } from \"../../utils/time\";\nimport Icon from \"react-native-vector-icons/Ionicons\";\nimport { enviarChat } from \"./websocket/chatEnviarAtualizar\";\nimport { ContextProvider, Provider } from \"../../utils/Provider\";\nimport { buscarChat } from \"../../data/utils\";\nimport { Chat } from \"../../model/Chat\";\n\nexport default function ChatScreen(props: NavigationChat) {\n    const { idRemetente, nome } = props.route.params;\n    const [conversas, setConversas] = useState<Conversa[]>([]);\n    const [mensagem, setMensagem] = useState(\"\");\n    const flatListRef = useRef<FlatList>(null);\n    const {chatData, webSock, setChatData } = useContext<ContextProvider>(Provider);\n\n    useEffect(() => {\n        carregarConversas()\n    }, [chatData, setChatData]);\n\n    const carregarConversas = async() => {\n        const chatEncontrado:Chat = await buscarChat(idRemetente, \"myKey\");\n        setConversas([...chatEncontrado.getConversas()]);\n    }\n\n    return (\n        <Container>\n            <NavChat navigation={props.navigation} nome={nome} idRemetente={idRemetente}/>\n            <ScrollContainer>\n                <FlatList\n                data={conversas}\n                keyExtractor={(item, index) => index.toString()}\n                onContentSizeChange={() => flatListRef.current?.scrollToEnd({ animated: true })}\n                onLayout={() => flatListRef.current?.scrollToEnd({ animated: true })}\n                renderItem={({item}) => {\n                    if (item.getTipoConversa() == TipoConversa.SENDER) {\n                        return (<ChatTopicSender>\n                                    <Mensagem>{item.getMensagem()}</Mensagem>\n                                    <Hora>{getCurrentDate(item.getTimestamp())}</Hora>\n                                </ChatTopicSender>)\n                    }\n                    return (\n                        <ChatTopicReceiver>\n                            <Mensagem>{item.getMensagem()}</Mensagem>\n                            <Hora>{getCurrentDate(item.getTimestamp())}</Hora>\n                        </ChatTopicReceiver>\n                    )\n                }}\n            />\n            </ScrollContainer>\n            <MessageSenderContainer>\n                <Input \n                placeholder={\"Escreva sua mensagem...\"} \n                cursorColor={\"white\"} \n                placeholderTextColor={\"white\"}\n                value={mensagem}\n                onChangeText={(text) => setMensagem(text)}\n                />\n                <Sender onPress={() => {enviarChat(mensagem, webSock, 1, idRemetente, setMensagem)}}>\n                    <Icon name={\"send\"} color={\"green\"} size={30}/>\n                </Sender>\n            </MessageSenderContainer>\n        </Container>\n    )\n}\n\nconst Container = styled.SafeAreaView`\n    flex: 1;\n    background-color: #303030;\n    margin-top: ${Constants.statusBarHeight}px;\n`\n\nconst ScrollContainer = styled.ScrollView`\n    width: 100%;\n    height: ${Dimensions.get('window').height - Constants.statusBarHeight}px;\n`\n\nconst ChatTopicSender = styled.TouchableOpacity`\n    width: 60%;\n    min-height: 50px;\n    background-color: #10a17d;\n    align-self: flex-start;\n    margin-top: 10px;\n    border-top-right-radius: 10px;\n    border-bottom-right-radius: 10px;\n    padding: 6px;\n    justify-content: center;\n`\n\nconst ChatTopicReceiver = styled.TouchableOpacity`\n    width: 60%;\n    min-height: 50px;\n    background-color: #294b6b;\n    align-self: flex-end;\n    margin-top: 10px;\n    border-top-left-radius: 10px;\n    border-bottom-left-radius: 10px;\n    padding: 6px;\n    justify-content: center;\n`\n\nconst Hora = styled.Text`\n    position: absolute;\n    bottom: 4px;\n    right:4px;\n    color: white;\n    font-size: 10px;\n`\n\nconst Mensagem = styled.Text`\n    color: white;\n    font-size: 14px;\n    padding-top: 4px;\n    padding-bottom: 16px;\n`\n\nconst MessageSenderContainer = styled.View`\n    width: 100%;\n    height: 50px;\n    flex-direction: row;\n    align-items: center;\n    border-top-width: 1px;\n    border-top-color: white;\n`\n\nconst Input = styled.TextInput`\n    color: white;\n    flex: 1;\n    padding: 10px;\n`\n\nconst Sender = styled.TouchableOpacity`\n    width: 50px;\n    height: 50px;\n    justify-content: center;\n    align-items: center;\n`"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}